// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"

import mock "github.com/stretchr/testify/mock"
import model "github.com/devpies/employee-service/pkg/model"

// EmployeeService is an autogenerated mock type for the employeeService type
type EmployeeService struct {
	mock.Mock
}

// GetEmployeeByID provides a mock function with given fields: ctx, id
func (_m *EmployeeService) GetEmployeeByID(ctx context.Context, id string) (model.Employee, error) {
	ret := _m.Called(ctx, id)

	var r0 model.Employee
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Employee); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Employee)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEmployee provides a mock function with given fields: ctx, employee
func (_m *EmployeeService) UpdateEmployee(ctx context.Context, employee model.UpdateEmployee) (model.Employee, error) {
	ret := _m.Called(ctx, employee)

	var r0 model.Employee
	if rf, ok := ret.Get(0).(func(context.Context, model.UpdateEmployee) model.Employee); ok {
		r0 = rf(ctx, employee)
	} else {
		r0 = ret.Get(0).(model.Employee)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.UpdateEmployee) error); ok {
		r1 = rf(ctx, employee)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
